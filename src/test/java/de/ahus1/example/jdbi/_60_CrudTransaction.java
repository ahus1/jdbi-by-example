package de.ahus1.example.jdbi;

import de.ahus1.example.jdbi._10_CrudJbdiSelectAllTest.Sighting;
import de.ahus1.example.jdbi._10_CrudJbdiSelectAllTest.SightingResultMapper;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.skife.jdbi.v2.DBI;
import org.skife.jdbi.v2.sqlobject.Transaction;
import org.skife.jdbi.v2.sqlobject.mixins.GetHandle;
import org.skife.jdbi.v2.sqlobject.mixins.Transactional;

import java.util.HashSet;
import java.util.Set;

/**
 * @author Alexander Schwartz (msg systems ag) 2016
 */
public class _60_CrudTransaction extends _00_AbstractJdbiBaseTest {

    @Before
    public void shouldSetupSequence() {
        dbi = new DBI("jdbc:oracle:thin:@localhost:1521:XE", "test", "test");
        dbi.withHandle(handle -> {
            handle.execute("CREATE SEQUENCE seq INCREMENT BY 1 START WITH 100");
            return null;
        });
    }

    @After
    public void tearDownSequence() throws Exception {
        dbi.withHandle(handle -> {
            handle.execute("DROP SEQUENCE seq");
            return null;
        });
    }

    public abstract static class SightingRepsitory implements _30_CrudJbdiInsertWithSequence.SightingRepsitory,
            Transactional<SightingRepsitory> {

        @Transaction
        public Set<Integer> doMultipleThings(Sighting s1, Sighting s2) {
            Set<Integer> result = new HashSet<>();
            result.add(createNewSightingAutogeneratedId(s1));
            result.add(createNewSightingAutogeneratedId(s2));
            return result;
        }

        public Set<Integer> doMultipleThingsAnotherWay(Sighting s1, Sighting s2) {
            return inTransaction((t, status) -> {
                Set<Integer> result = new HashSet<>();
                result.add(t.createNewSightingAutogeneratedId(s1));
                result.add(t.createNewSightingAutogeneratedId(s2));
                return result;
            });
        }
    }

    public abstract static class Wrapper implements GetHandle {

        @Transaction
        public Set<Integer> doMultipleThings(Sighting s1, Sighting s2) {
            return getHandle().inTransaction((conn, status) -> {
                Set<Integer> result = new HashSet<>();
                SightingRepsitory repo = conn.attach(SightingRepsitory.class);
                result.add(repo.createNewSightingAutogeneratedId(s1));
                result.add(repo.createNewSightingAutogeneratedId(s2));
                return result;
            });
        }

    }

    @Test
    public void shouldDoTwoThingsInTransaction() throws InterruptedException {
        dbi.registerMapper(new SightingResultMapper());

        Sighting s = Sighting.builder()
                .id(2).name("Enterprise")
                .build();

        SightingRepsitory sightingRepsitory = dbi.onDemand(SightingRepsitory.class);
        sightingRepsitory.doMultipleThings(s, s);
    }

    @Test
    public void shouldDoTwoThingsInTransactionInAnotherWay() throws InterruptedException {
        dbi.registerMapper(new SightingResultMapper());

        Sighting s = Sighting.builder()
                .id(2).name("Enterprise")
                .build();

        SightingRepsitory sightingRepsitory = dbi.onDemand(SightingRepsitory.class);
        sightingRepsitory.doMultipleThingsAnotherWay(s, s);
    }

    @Test
    public void shouldDoTwoThingsInTransactionInYetAnotherWay() throws InterruptedException {
        dbi.registerMapper(new SightingResultMapper());

        Sighting s = Sighting.builder()
                .id(2).name("Enterprise")
                .build();

        Wrapper sightingRepsitory = dbi.onDemand(Wrapper.class);
        sightingRepsitory.doMultipleThings(s, s);
    }

}
